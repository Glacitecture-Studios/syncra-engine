{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Syncra Engine Documentation","text":"<p>Welcome to the Syncra Engine Docs! Here, you can find a plethora of information about the Syncra Suite of Plugins and Software.</p>"},{"location":"#what-is-syncra","title":"What is Syncra?","text":"<p>Syncra Engine, or just Syncra, is a Rhythm Game Level Editing Toolset made in Godot Engine 4.x.</p> <p>Most Rhythm Game Level Editors are proprietary and designed specifically for that game, and while this is typically acceptable as most rhythm games have custom mechanics that can't be charted for in a more generic tool, when it comes to game engines, having to build an entire charting tool from scratch is VERY time consuming and eats up valuable development time (believe me, I know from experience).</p> <p>Syncra Engine intends to solve this problem by providing developers with a host of tools and systems to jumpstart their Rhythm Games without the needing to reinvent the wheel again and again.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>Syncra, by design, is a level editing tool for Rhythm Games, new or existing, but it also comes with some very powerful QoL tools and other tools designed to make working in teams easier.</p> <ul> <li>Global Rhythm Charting Editor: Time-based event charting with beat snapping, zooming, waveform display and audio sync.</li> <li>Modular Event System: Define, trigger and export custom code events across different engines.</li> <li>Flexible Timeline and Layers: Insert audio events, visual events, gameplay markers and sync cues on distinct layers.</li> <li>Custom <code>.syncra</code> File Format: Export charts into structured project archives for engine-agnostic use.</li> <li>Cross-Engine Exporters: Built-in exporters for Unity, Unreal, Godot, Bevy, and more.</li> <li>Customizable Preferences: Full UI/UX customization, themes, snapping, audio settings and more.</li> <li>Plugin Architecture: Extend editor functionality using GDScript or your own plugins.</li> </ul>"},{"location":"#supported-engines","title":"Supported Engines","text":"<p>While Syncra does try to make integration into most popular engines easy and simple, we obviously cannot support every kind of Game Engine in existence. As such, we've tried to focus on some of the most commonly used ones:</p>"},{"location":"#unity-engine","title":"Unity Engine","text":"<p>The Unity Engine (C#) Syncra Runtime Library (SRL) allows developers to easily integrate Syncra Archives (.syncra) into their Unity Games by invoking methods from the <code>Syncra</code> namespace.</p>"},{"location":"#installation","title":"Installation","text":"<p>Syncra for Unity is distributed through the Unity Package Maanger (UPM). To install it, you can add it via a Git URI.</p>"},{"location":"#usage","title":"Usage","text":"<p>Note</p> <p>See the [Syncra for Unity] page for more in-depth syntax and reference.</p> <p>All methods that Syncra offered are located within the <code>Syncra</code> namespace and any of it's nested namespaces.</p> <p>To invoke a chart event manually, you can use the following methods:</p> EventInvoker.cs<pre><code>using Syncra;\nusing Syncra.Events; // For GetSyncraEvent\nusing Syncra.Events.Types; // For the SyncraChartEvent type\n\nprivate static void Main(string[] args) \n{\n    SyncraChartEvent event;\n    event = GetSyncraEvent(\"myEvent\"); // (1)!\n\n    SyncraEventHandler.InvokeChartEvent(event); // (2)!\n}\n</code></pre> <ol> <li>The <code>GetSyncraEvent()</code> method allows you to retrieve a Syncra Event. You can also optionally pass a <code>SyncraEventType</code>.</li> <li>The <code>SyncraEventHandler.InvokeChartEvent()</code> method allows you to manually invoke the code associated with a chart event. This typically isn't recommended as Syncra does this automatically during gameplay.</li> </ol>"}]}